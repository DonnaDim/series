[
["index.html", "Openscapes Champions Lesson Series Chapter 1 Welcome 1.1 Agendas", " Openscapes Champions Lesson Series Julie Lowndes 2019-09-29 Chapter 1 Welcome This book is a lesson series for the Openscapes Champions program. It is under heavy development; some chapters are only notes at this point. Openscapes Champions is a mentorship program that empowers scientists with open data science tools and grows the community of practice. We mentor early career researchers in leadership roles – faculty, lecturers, program managers, and others who want to establish open data science practices in their labs and on their campuses. It is designed to meet scientists where they are and help identify incremental steps to make their data workflows more efficient and open. We’ve been building Openscapes from an open data science angle, but along with that comes the mindset of openness, collaboration, good intentions, and creating the culture we want in science. Note: “lab” is broadly defined. The Series is framed around Lowndes et al. 2017, Nature Ecology &amp; Evolution: Our path to better science in less time using open data science tools. That paper is a retrospective of how a team’s data workflow changed over four years; the Openscapes Series aims to help guide other labs to incrementally make similar progress themselves, no matter where they are starting from. 1.1 Agendas The first half of the Series focuses on efficiency and open culture within the lab, and the second half is about sustained learning and bringing these practices to the broader campus community. This Series is taught over a five-month period, with two Cohort Calls each month with Champions and their lab members. Calls are designed to be engaging, requiring discussion and participation through Google Docs and Zoom (group and breakouts). Call agendas and slides are all available in a Google Folder, and identified individually in the following table. Additionally, we end each lesson by learning hands-on efficiency tips, compiled here as an Efficiency Tips Doc and Spreadsheet. Agendas Chapters Slides 1. Openscapes overview &amp; mindset overview, mindset overview, mindset 2. Better science in less time better science in less time better science in less time, data interlude 3. Lab culture lab culture, code of conduct lab culture, code of conduct 4. GitHub for the lab GitHub for publishing, GitHub for project management GitHub for publishing, GitHub for project management 5. Streamlined workflows with code source files, filepaths &amp; project oriented workflows source files &amp; file paths; project oriented workflows 6. Mid-series check in 7. Coding with communities, part 1 coding with communities coding with communities, part 1 8. Coding with communities, part 2 coding with communities, part 2 9. Communicating science openly publishing &amp; discoverability 10. Presentations: Openscapes Case Studies The Series is written (and always improving) to be used as a reference, to teach, or as self-paced learning. And also, awesomely, it’s created with the same tools and practices we will be talking about: R and RStudio — specifially bookdown — and GitHub. Openscapes is operated by the National Center for Ecological Analysis &amp; Synthesis (NCEAS) and is being incubated by a Mozilla Fellowship awarded to Julia Stewart Lowndes. Openscapes is licensed under a Creative Commons Attribution 4.0 International License. "],
["overview.html", "Chapter 2 Overview 2.1 Why we’re here 2.2 What to expect 2.3 What’s possible with open data science (demo) 2.4 What we’ll learn 2.5 Deliverables 2.6 Additional reading", " Chapter 2 Overview Welcome. Our vision is a scientific culture that is more efficient and collaborative, and can uncover environmental solutions faster. This Series is going to be fun and empowering! We will talk about a lot of tools and practices to make your science more streamlined. This is really powerful, cool stuff, and not just for data: I made and published this book using the tools and workflows we’ll talk about. The first half of the Series focuses on efficiency and open culture within the lab, and the second half is about sustained learning and bringing these practices to the broader campus community. 2.1 Why we’re here We are passionate environmental scientists studying important, time-sensitive topics using data of all kinds. And we were never taught to work efficiently with data. Data analysis can be inefficient and demoralizing when you’re without the right tools/skills and you feel alone. But! Open tools, practices, and communities exist that are powerful and empowering, and game-changing for science. And we can learn and use open practices for science. They are like the Force from Star Wars: More powerful than you ever imagined Helps you solve your current question powerfully – but also broadens the scope of the questions you can ask Learn from jedis, pass on what you have learned, have a ton of awesome allies (and not all allies are jedis) 2.2 What to expect 2.2.1 This is going to be fun and empowering! We are going to be discussing a wide range of topics and working to seed habits for you to engage and learn with them with our lab and others on campus. 2.2.2 Exposure to relevant tools &amp; practices, confidence &amp; agency to engage, community to learn with The plan is to expose you to a lot of great tools and practices that you can have confidence using in your research. We will also spend time helping you plan how to actually incrementally weave them into your existing workflows. The point is not to overwhelm you or make you feel like it’s too late for you or that you would need to throw out and redo everything you’ve ever done in order to take the first step. No. By seeing what’s possible and how shared practices can make your own life easier, and life easier and more streamlined and fun with your lab and beyond, you’ll start experimenting with these practices and in a few years you will be working in a completely different way. 2.2.3 Create a shared culture – in your lab, on campus, and beyond We’re going to go through a lot and it’s less important that you remember it all. More importantly, you’ll know what is possible, have confidence that you can do it, and have allies so you’re not alone. The main thing to take away is that there are good ways to approach your analyses; we will teach you to expect that so you can find what you need and use it! A theme throughout is that tools exist and are being developed by real, and extraordinarily nice, people to meet you where you are and help you do what you need to do. If you expect and appreciate that, you will be more efficient in doing your awesome science. 2.2.4 No skills required. We will strategize about general approaches, specific examples using R/RStudio and GitHub There are no skills required to participate, and we will not be teaching hands-on how to code or set up databases. But we will be talking about how these are important and fit together in the big picture, and how to get started learning the skills you need. This is an opportunity to discuss existing tools and how to engage, meet other labs, discuss next steps, and stay accountable. We’ll talk about tools and practices broadly, but also with specific examples using R and GitHub. Won’t that software eventually become outdated you say — is it worth learning them over something else? The answer is yes, software will change and become outdated; it always has. But seeing what is possible and becoming versed in embracing existing architecture and practices will set you up to make whatever transition comes, and you will make this transition with the community, not along. Your skills will be transferrable skills as the actual software changes. Analogy: if you learn one musical instrument, you will be able to learn another one more fluidly than if you have never learned one to begin with because maybe you can read music, understand something about timing and rhythm, etc. 2.2.5 Everyone is coming with different experiences &amp; expectations Everyone in this workshop is coming from a different place with different experiences and expectations. But everyone will learn something new here, because there is so much innovation in the data science world. You are encouraged to ask questions and answer those of others. 2.2.6 We are all learning together These tools are new to all of us, and the best ideas come from questions from anyone. If you are already familiar with some of this material, think about how your experience was learning it, and how you might teach it to others. Use these workshop materials not only as a reference in the future but also for talking points so you can communicate the importance of these tools to your communities. A big part of this Series is not only for you to learn these skills, but for you to also teach others and increase the value and practice of open data science in science as a whole. 2.2.7 Vulnerability: yes! Shame: no. Shame is not allowed here. No “I’m 34 and haven’t learned GitHub, it’s too late for me” or any of that. We have never had the opportunity to learn these things, there should be no shame on your part for that. It takes a lot of time and dedicated effort to learn and employ these practices, and they should be valued and taught. That’s why you’re here now, you should be proud that you are taking the initiative and your time to do this. No shame. Vulnerability, however, will be involved in this Series. Vulnerability is a big part of learning and trying new things — this is a safe place for everyone to learn. Vulnerability is taking stock of where you are now and help you map out where you want to be. Being vulnerable is scary. But it shouldn’t be lonely: we all have data confessions that would love to talk about and get help with, if only our scientific culture said that was OK; if only we knew how to articulate our questions and have someone to ask. This is a place to share our vulnerabilities to ignite real change. Ask questions. Whether it’s a keyboard shortcut or philosophy of data workflows, ask and let’s talk about it. 2.2.8 Everyone is welcome here You are all welcome here, please be respectful of one another. We are setting a tone of mutual respect and a space place for learning where we assume good intentions and interact with kindness and empathy. Pass it on. 2.3 What’s possible with open data science (demo) R for automation, visualizations github for collaborating (code, text) bookdown websites github for project management organize by project, i.e., keep that code and those methods in same parent folder, rather than all the R code you’ve ever written being in a giant folder, spanning projects public &amp; private issues, tagging people on commits, kaban board Live: fix a tpyo and republish the book/page 2.4 What we’ll learn 2.4.1 Expect that there is a better way Seeing what’s possible opens up what you expect. There is a bit of a chicken and egg issue here: you need to be exposed to things so you know what’s possible and what skills to develop, but you need to kind of know what to look for so you can absorb what you are exposed to. 2.4.2 Have agency to find it Break down that “I teach you learn” model. We are all here to learn and improve. Learning horizontally. This series is not about micro-managing your science but about providing guidance &amp; structure so that everyone in the lab is not silently struggling to reinvent the wheel and coming up with weird homegrown data approaches. What skills you should have and what you should be thinking of, along with some of the tools you can use. Will be building out the Resources page on the website for this purpose. And search the blogs. 2.4.3 Have community to learn with No more silently struggling &amp; reinventing the wheel &amp; creating weird, homegrown workarounds. Embrace emerging and established community best practices 2.4.4 Identify what skills and tools you need, map next steps &amp; learn 2.5 Deliverables aka Outcomes. Be champions for open data science (in your labs, departments, communities.) A more open culture in your lab dedicated lab meetings to discuss data workflows “Seaside chats” (&lt;- this is what we call them at OHI) stated code of conduct or lab philosophy beginnings of a lab roadmap of shared data workflows A growing community of practice on campus study groups / coding clubs (ex: Eco-Data-Science) hacky hours 2.5.1 What would you do in a Seaside Chat? Example topics from the Ocean Health Index: Let’s have READMEs so we know what the heck things are Set up Zotero with RMarkdown Filepath woes: use .Rprojects Where to put data – here’s how our server works Filepath woes 2: use the new here package! Let’s plan a lab “hackathon” to move these .xls to .csv files we store on Github 2.5.2 What would you do in a Study Group? Example lessons from Eco-Data-Science (&lt;- all lessons linked “previous sessions”) Introduction to GitHub Text analysis in R Spatial analysis in R Free websites with RMarkdown Animated plots in R with ggplot2 &amp; gganimate Intro to Python 2.5.3 Assignments There will be assignments between each call that should take about two hours over two weeks. Assignments are designed to be done during lab “Seaside chats”, weekly meetings to discuss data workflows and establish shared practices. Assigned after each call. Do them collaboratively during lab “Seaside chats”. They should take take 2 hours (over 2 weeks). Come prepared to debrief in the following Cohort Call! 2.6 Additional reading Practical Computing for Biologists. Introduction to the Terminal/command line, introduction to regular expressions. Chapter 2 alone. "],
["mindset.html", "Chapter 3 Openscapes Mindset 3.1 Data science as a discipline 3.2 Open data science tools exist 3.3 Open as a way to work 3.4 Lab members as a team 3.5 Learn with collaborators and community (redefined) 3.6 The internet as an underleveraged tool for science", " Chapter 3 Openscapes Mindset We are here because I know these files are on your computer — we all have them. data_final_final.xls data_final_usethis.xls ... thesis_v16_new_ch1.docx thesis_v16.docx ... And we also send and receive emails with subject lines like: Re:FWD:Fwd:Data question Re:Sending again with the correct version We are going to talk about how to make the data experience better, for you, your lab, your department, and beyond. 3.1 Data science as a discipline Alternative title: “Data science is a thing”. No matter what your study system or your question, to Do Your Science you will need to get your data into analytical software, wrangle it (tidy and transform), and make sense of it visually and with models. Very important here: tidy your data first, don’t build your whole analysis around whatever weird format your data may have come in. We’ll talk about tidy data in more detail another day. R for Data Science 3.1.1 There are concepts, theory, and tools for thinking about and working with data Just like a field chemistry has concepts for things like moleculte, theory for how they work, and tools for studying them, so does data science — for data. 3.1.2 Emphasis on communication It is incredible what is possible on the communication front. Watch this one-minute video called What is RMarkdown? to blow your mind. 3.1.3 Not just for “big data” 3.1.4 Your study system is not unique when it comes to data Think about your data separately from your study system. Don’t confound them or it will be really hard to ask for help. Expect there is a way to do what you want to do. This will help you find commonalities and unite you with other lab members and beyond. 3.1.5 Distinguish data questions from research questions, learn how to ask for help 3.2 Open data science tools exist 3.2.1 Tools to match data science theory Wickham 2017 3.2.2 They exist to streamline working with data 3.2.3 And they are developed by actual people – nice people! 3.2.4 My advice 3.2.4.1 Expect there is a better way If you’re making the same plot 10 times, stop. Don’t confound data science with your science. Expect that someone has had your problem before or done what you want to do. 3.2.4.2 Divorce your science question from the data science question Focus on the operations for the data, not your hypothesis 3.2.4.3 Google your question (ask for help) Articulate it, and identify useful solutions Trusted urls, recent dates 3.3 Open as a way to work 3.3.1 Open science as a way to be more efficient and streamlined Not an added ask at publication to share your data It’s not only about sharing data. It’s about how you work, who you include, and the tools that you use. 3.3.2 External memory (personal and collective) Easier on/offboarding 3.3.3 Find solutions faster – learn to talk about your data 3.3.4 Build confidence – skills are transferable beyond your science 3.3.5 Be empathic and inclusive – grow a network of allies 3.4 Lab members as a team Science is collaborative. Not heads down elbows out. 3.4.1 Focus on what unites lab members, not what sets them apart 3.4.2 Think of the lab horizontally as skillsets &amp; needs instead of vertically as science bins Instead of the skills you have when you come to the lab determining how you will be able to Do Science, have shared practices in the lab and paths to onboard new people to work that way as well. 3.5 Learn with collaborators and community (redefined) Communities for learning, teaching, and mentorship. 3.5.1 Helps overcome isolation, self-taught bad practices, apprehension Stevens et al. 2018 ### Your most important collaborator is Future You Cannot emphasize this enough. Work now so that you can succeed later (whether that’s this afternoon or 4 years from now) 3.5.2 Communities beyond the colleagues in your field 3.5.3 Learn from, with, &amp; for others 3.6 The internet as an underleveraged tool for science 3.6.1 Twitter for learning Follow selectively, listen &amp; learn (e.g. #rstats) "],
["bsilt.html", "Chapter 4 Better science in less time 4.1 OHI pathway 4.2 Resources to highlight 4.3 R for science communication 4.4 Seaside chats 4.5 Table 1 4.6 Pathway", " Chapter 4 Better science in less time We will highlight some concepts brought up in Lowndes et al. 2017, Nature Ecology &amp; Evolution: Our path to better science in less time using open data science tools. 4.1 OHI pathway Motivated by necessity Improved by possibility &amp; community Gives us more time to do other things (like focus on science) 4.1.1 Shared workflows not only useful for shared projects OHI team: we work on many different projects, still use same workflows and share feedback Shared conventions reduce friction Common ground, easier to talk about, easier to ask for help Identify collaborative opportunities - Reduce cognitive load - You don’t need to design everything from scratch Easier to find things 4.2 Resources to highlight 4.2.1 Not so standard deviation podcast Parker &amp; Peng http://nssdeviations.com Great discussions about data concepts and “in the wild” Episode 9: Spreadsheet drama 4.2.2 Practical computing for biologists Haddock &amp; Dunn http://practicalcomputing.org/ Software &amp; computing concepts already on your computer Chapter 2: Regular expressions 4.3 R for science communication OHI Team http://ohi-science.org/betterscienceinlesstime/ Website built with R/RMarkdown &amp; Github List of media &amp; lectures, resources Interviews in Nature, rOpenSci Example of what you can do (1-hour tutorial) 4.4 Seaside chats Ocean Health Index: Standing meeting, 1hr 1x/week Ours are lab members only (not the lab lead) Topic planned ahead Usually low effort, but not always I need to learn Zotero, I’ll share what I know by next week Hey, could you show us how you use GitHub? We keep a list of topics helps with onboarding new members 4.5 Table 1 Took us a long time to make this, really difficult to parse out what we were doing so that we could improve. 4.6 Pathway Let’s use the BSILT Table 1 as a way to help you think of how you work now and identify your paths forward. Deliberately identify: data workflow practices in your lab 22 next steps to facilitate efficiency and open culture. Will help create protocols for shared lab practices – important for onboarding. example and blank doc to work from "],
["lab-culture.html", "Chapter 5 Lab culture 5.1 Why talk about lab culture? 5.2 Deliberately setting the tone 5.3 Collegiality 5.4 Lab efficiency 5.5 Enabling &amp; participating 5.6 Post Cohort Call Resources", " Chapter 5 Lab culture 5.1 Why talk about lab culture? Please see accompanying slides until this chapter is built out more. 5.1.1 Science benefits from diversity And we need to be deliberate about welcoming and including people from diverse backgrounds. A few recent articles from Nature with many more links within: Science benefits from diversity What does it take to make an institution more diverse? 5.1.2 Sexual harassment is rife in the sciences Sexual harassment is rife in the sciences, finds landmark US study. Existing policies to address the issue are ineffective, concludes a long-awaited report from the National Academies of Sciences, Engineering, and Medicine. Most common form is gender harassment: it’s the “put-downs as opposed to come-ons”. 5.1.3 Put your values forward Model the behavior you want to see in your lab &amp; in academia. (lab, dept, campus, online) 5.1.4 Building trust Have to build trust and be intentional, don’t hope for organic 5.1.5 Sustain the culture Overtly showing kindness &amp; a Code of Conduct can filter out people who don’t want to be subject to its enforcement – rOpenSci Labs have people coming and going all the time; how do you set the tone and have it be sustainable? 5.2 Deliberately setting the tone Opening remarks at RStudio::conf 2019, in front of an audience of 1700 at a global software conference, Chief Scientist Hadley Wickham announces the Code of Conduct, how to identify RStudio staff if you need help, and how to mingle with welcoming body posture to invite others to join. This set the tone of the whole conference to be the most positive I have ever attended. 5.3 Collegiality Deliberately setting the tone for collegiality. 5.3.1 Positive, inclusive lab environment. 5.3.2 Safety and accessibility as parts of inclusion and empowerment. 5.3.3 Reslience Add resilience to your lab. If someone needs to leave for a family emergency, maternity/paternity leave, vacation, set yourselves up so your lab continue smoothly/ — Angela Bassa RStudio talk Opportunity cost of not doing this. Burnout, people leaving science. 5.4 Lab efficiency Deliberately setting the tone for lab efficiency 5.4.1 Team mindset: focus on similarities rather the differences. 5.4.2 Sharing &amp; collaboration: default to assuming good intentions. 5.4.3 Advantage to having lab conventions But need room for different skills people come in with. Reduce friction and reinventing the wheel. If they’re more efficient in python, don’t want to force R. 5.4.4 Open software can facilitate open/shared culture This is (next week’s topic)! 5.5 Enabling &amp; participating 5.5.1 Seaside chats – discuss share data workflows From Michelle Stuart’s blog about the Pinsky Lab’s first Fishbowl chat: This open communication has leaked into the general discussion going on in our open work space. Lab members seem more comfortable with asking teammates for help, and it is exciting to see all of us getting on the same page with our data science.&quot;� 5.5.2 Hackathons or documentation parties – co-create 5.5.3 Social events Get to know each other outside of work. Do some during work hours can include more people who can’t participate after work 5.5.4 Onboarding – how to welcome new people to your lab 5.5.5 Asking for help Create a welcoming environment where they know where to ask for help – They won’t know what questions to ask. Provide structure. 5.5.6 Code of Conduct (next slide deck) 5.6 Post Cohort Call Resources "],
["code-of-conduct.html", "Chapter 6 Code of Conduct 6.1 Code of Conduct also known as 6.2 Requirements 6.3 Case study: rOpenSci 6.4 Case study: Titus Brown’s lab 6.5 Examples to build from", " Chapter 6 Code of Conduct Please see accompanying slides until this chapter is built out more. Important for: Conferences &amp; workshops Online communities Labs &amp; departments 6.1 Code of Conduct also known as Community Participation Guidelines Code of Practice Similar ideas: Lab philosophy, mission statement, participation agreements 6.2 Requirements Clear explicit statements Seen and heard – that all participants know about Accessible and discoverable online Mentioned aloud in meetings/interviews/onboarding Avenues for action, identified committees, recusals 6.3 Case study: rOpenSci CoC itself Blog post about the CoC Blog post about creating the CoC — following a community call on the topic. Interesting points: Drafting – make it good and revisit; but not a living doc Adopting and sharing – so people know it exists &amp; where to find it Reporting and enforcing – standardized form can help 6.4 Case study: Titus Brown’s lab CoC Notes on our lab Code of Conduct highlights: develop &amp; post a CoC whether or not you know of any problems the CoC has to set expectations for everyone “…impostor syndrome rules and it takes a bit of overt friendliness for people to ask questions. Providing ground rules for interaction helps tremendously.” “There have definitely been benefits in recruiting: having a code (and following it!) means that people know you are aware of many issues that all too many faculty seem unaware of… this encourages a more diverse applicant pool. This may be one reason the lab is fairly diverse in practice, as well.” 6.5 Examples to build from rOpenSci CoC Titus Brown Lab CoC Mozilla Community Participation Guidelines Template CoC for labs "],
["github-pub.html", "Chapter 7 Github for Publishing 7.1 Preamble 7.2 What is GitHub? — Traditional answer 7.3 What is GitHub? — Non-traditional answer 7.4 Github framework in a nutshell 7.5 GitHub Orientation 7.6 Editing files from GitHub.", " Chapter 7 Github for Publishing 7.1 Preamble Note: the slides for this chapter have additional screenshots not included here yet. We are going to talk about GitHub, and learn about using it for publication and project management. We will focus on collaboration and communication with hands-on practice. We are going to work with GitHub from the browser only, because it makes the best use of our short time together. It is also a powerful way for folks to contribute and collaborate even if they are not involved in day-to-day hands-on analysis. So this might be good for new lab members or students to contribute to your lab as soon as possible. GitHub can reduce friction for open science: lets us publish and communicate without a lot of heavy lifting! 7.2 What is GitHub? — Traditional answer GitHub means GitHub.com; it’s a company. It centers around git, which is powerful version control software for your local computer. This has been around for years, taking care of bookkeeping for you locally on your computer. GitHub makes git collaborative through a powerful online platform. It will weave together all the bookkeeping from your local computer with other collaborators you work with. It is used for code and files: organize, archive, bookkeeping, searchable, changes visualized, etc. We aren’t going to teach traditional git/GitHub today, but here are 2 recommended tutorials from OHI-Science’s data-science-training. This teaches you how to set up GitHub to sync directly through RStudio, so that you don’t have to have any other software (including the command line) open to do so: GitHub Collaborating with GitHub Note: locally, I interact with GitHub through RStudio 99.9% of the time (use command line .1% of time). There is also a chapter on R, RStudio, and RMarkdown. If you use R, then the best resource to learn GitHub is Jenny Bryan’s Happy Git With R. 7.3 What is GitHub? — Non-traditional answer 7.3.1 Publishing platform It’s for books, websites, interactive dashboards 7.3.2 Project management system It’s a project management system for short and long-term tasks. Really powerful to have collaborative todo’s in the same software (and user accounts) as all the analysis and all the people that you’re already working with. We will talk about “Issues” &amp; “Projects” in the next chapter 7.4 Github framework in a nutshell 7.4.1 Users vs. organizations Example: jules32 vs. openscapes. You can think of them like other social media accounts: I can be an individual or part of a group, and there are permissions associated with both. 7.4.2 Repositories (“repos”) Repos are GitHub’s main unit. They are essentially a folder, and you’ll put files and folders in them. They are contained, with permissions specific to each one. It makes it easier to navigate through and find stuff — so you are “not sifting through a zoo of files”. 7.4.3 “Commits” &amp; “commit messages” Unlike Dropbox or Google Drive that constantly and automatically sync to the cloud, you have to deliberately say when you have an amount of work that you want to be versioned and synced. You have to commit to it. GitHub takes care of the backend bookkeeping involved, but you have to write a human-readable message to your future self and others. That is the commit message. Leave breadcrumbs for yourself. 7.4.4 Public vs private 7.4.5 Search feature is awesome This helps so much for navigating through the zoo of files. 7.4.6 Branches &amp; Forks We’re not going to talk about these. These are a core feature of what makes GitHub super powerful for software development, and one of the first things you’ll see in GitHub tutorials. But I do not think that is the most relevant or smoothest entryway for those of us who are scientists fairly new to collaborative coding and version control. 7.5 GitHub Orientation This is a demo 7.6 Editing files from GitHub. This is also a demo, but we covered: First a Disclaimer: you don’t want to edit from the browser for most things – you would want to “clone” the repo to your local computer and leverage more goodies &amp; power. However, you will sometimes edit in the browser, and it’s a good entry point for us today, and maybe for onboarding folks in your lab in the future. Why not edit in the browser? You don’t want to overwrite each other or forget yourself. Good for quick md editing, not script editing. In the demo, the example .md was a deliberate example of sharing slides from a talk :) What to do: (you all have permissions) Go to https://github.com/openscapes/demo/yourname.md Click on the pencil to edit your file Make many edits &amp; commits with commit messages Github.com has a default message, but get into the habit of writing an actual message to yourself/others (breadcrumbs) This is different from saving (cancel if you save!) "],
["github-issues.html", "Chapter 8 GitHub for Project Management 8.1 Preamble 8.2 What are Issues? 8.3 Issues in the Wild 8.4 How to use Issues 8.5 Strategies for Issues 8.6 Your Turn: Create &amp; comment on issues", " Chapter 8 GitHub for Project Management 8.1 Preamble GitHub is best known as a collaborative coding platform. But of course productive collaboration requires communication, and GitHub has powerful features to support communication and project management through GitHub Issues. We are focusing on GitHub Issues here because they are a powerful way for team members to have active discussions about data and code, and therefore ways to participate in analyses even for those that are not involved in the day-to-day coding. I find Issues not only useful to discuss topics as a team, but I also treat it as my external memory: I write notes to myself, link to files and websites; I leave breadcrumbs for myself so that I am more easily able to remember my past thought processes and pick up projects where I left off. In this way, GitHub Issues help actualize the mindset of Future You and Future Us. This means being deliberate now about communicating decisions and progress so that you or others can work in the future a little more smoothly. Using project management software is a strategy used by every software developer or people working on projects with many moving parts. It streamlines technical discussions with people who are coming/joining a group. It also helps organize and track projects that single or multiple &amp; overlapping users can be a part of. While there are many options for project management software out there, I like using GitHub because it’s already managing my code and my work, and linked to my collaborators so it offers a streamlined way to communicate. It’s also one less account I need to have, which is a huge bonus in my mind. One of the reason we talk about Issues in Openscapes is because they are an excellent way to develop habits for using GitHub for your analytical project more broadly. 8.2 What are Issues? Every GitHub repository (shortened to “repo”) has a feature called Issues. Issues is GitHub’s project management and task-tracking feature. Issues “track ideas, enhancements, tasks, or bugs for work on GitHub.” - GitHub Jenny Bryan has an excellent summary of Issues in her article “Excuse Me, Do You Have a Moment to Talk About Version Control?” (open-access pre-print from PeerJ, published in The American Statistican): GitHub issues are another powerful feature of the platform. Recall that we are repur- posing Git, a tool that facilitates software development. Think of the issues for a project as its bug tracker. For projects that are not pure software development, we co-opt this machinery to organize our to-do list more generally. The basic unit is an issue and you can interact with one in two ways. First, issues are integrated into the project’s web interface on GitHub, with a rich set of options for linking to project files and incremental changes. Second, issues and their associated comment threads appear in your email, just like regular messages (this can, of course, be configured). The result is that all correspondence about a project comes through your normal channels, but is also tracked inside the project itself, with excellent navigability and search capabilities. For software, issues are used to track bugs and feature requests. In a data analysis project, you might open an issue to flesh out a specific sub-analysis or to develop a complicated figure. In a course, we use them to manage homework submission, marking, and peer review. Issues can be assigned to specific people and they can be labelled, e.g. “bug”, “simulation- study”, or “final-exam”. Coupled with the ability to cross-link issues and the project files or file changes, you have extraordinary power to document why things have happened in the past and to organize what needs to happen in the future. You create an Issue for a topic, and use it track progress or ask questions. You can provide links, describe updates, link to other Issues, and you can close the Issue when it is completed. You can also re-open previously-closed Issues. Every GitHub repository has this Issues feature. This means that sometimes Issues are public and sometimes they are private. In a public repo, anyone with a GitHub username can create and comment on issues. In a private repo, only users with permission can create and comment on issues, or see them at all GitHub search is awesome – it will search all of your files and Issues! 8.3 Issues in the Wild Here are some examples of “traditional” and “non-traditional” use of issues. ggplot2’s Issues is an example of what I think is the “traditional” use of Issues, which is in a pretty pure software development context. This is a public repository, and all topics are directly related to ggplot2. Issues are largely used to report bugs, troubleshoot and sometimes to request features. Note the “Filters” feature on the top-left: this by default will search through the Issues that are still open, but you can also change this if you wanted to search also for closed Issues (just below “Filters” you can see that there are over 2000 closed Issues, documenting the innovation that’s been ongoing in ggplot2). MozillaFestival’s Issues are an example of a less “traditional”, but increasingly common use of Issues: for project submissions, coordination, and community engagement. It is also an example of the use of labels: those colorful tags that help group and categorize the Issues. To the right of “Filters”, you’ll see a “Labels” button: clicking on this will give you a list of all the labels and how many Issues are tagged with each label. OHI-Science’s Issues: are also an example of less “traditional” use of Issues but perhaps also somewhat common. This is a private repository, which is why there is no link to these Issues. Here, Issues are used for private conversations and archiving ideas and discussions: the OHI-Science team uses issues instead of email to have private, archived, searchable conversations about scientific methods. We are diligent about having important science conversations in these Issues, rather than those conversations being lost in emails or Slack. This is more organized and also makes onboarding team members much smoother since we do not need to forward emails to new team members. 8.4 How to use Issues Let’s do a demo with Issues. 8.4.1 Creating a new Issue When you click on the green “New Issue” button&quot;, you’re asked to give a Title and Leave a Comment. You can also attach files or images by dragging them into the Issue. Then you’ll be able to Submit the Issue. On the right side, you’ll see options to Assign someone to the Issue, add a Label, add it to a Project, or add it to a Milestone. We’ll explore these features a bit more in a moment. When you click Submit, your Issue gets a number, which is now written next to the title. This number is also part of the URL as well. On the right of the Title, note that there is an “Edit” button if you ever need to change the title of the Issue as the conversation evolves. The Issue number will stay the same. What happens if you want to edit the text of your Comment after you’ve Submitted it? No problem. See that once you’ve submitted an Issue, there is a blue bar at the top of the Comment, attributing your username to this comment along with the date. At the very right of this blue bar, there are 3 dots. Clicking here will give you the option to edit. 8.4.2 Commenting The great thing about Issues is that they are for conversations with yourself and others. So once you’ve submitted an Issue, you can string together additional Comments within this comment. Maybe you asked a question, and someone else will respond with a solution or idea. They might link to an Issue with a related topic, or an external link that might be helpful. You can also tag people in Issue Comments with the “@” symbol. As noted above, anyone who is part of the repository will automatically get email notifications when comments are submitted. But tagging specific users will also send them an email, and is a good way to bring folks into the conversation who might not already be “watching” the whole repository. In a public repository you can tag any GitHub user, and in a private repository they have to have permission. Each time there is a comment in the Issue thread, there will be a new date marked in the blue bar at the top of the Issue. This is a nice way to see how current conversations are. And something really great is that you can click on the date — and watch the URL change. This allows you to anchor to a specific comment within the Issue thread. This is really useful if, for example, you wanted to share a specific comment with someone else instead of having them scroll down themselves. (Note: you can also click on the three dots at the right of the blue Comment header to copy the anchored link). 8.4.3 Markdown Issues support Markdown. This means that you can add simple formatting to your text, such as headers, bold and italics, lists, images, links, and formatted code. To help you use Markdown formatting as you learn, GitHub Issues have built-in help: there are icons between the Title and the Comment of the Issue that will do the Markdown formatting for you, and help you learn along the way. There is also a “Preview” tab between the Title and Comment (next to the “Write” tab, where you are by default) where you can preview what your Markdown formatting looks like before you Submit the Issue. Submitting the Issue will also render the Markdown formatting. GitHub enables you to also create Markdown check-lists by typing - [ ]. Once this is rendered, you can click it to check this box. Alternatively, in Markdown you check a box by typing - [x]. The number of checked and unchecked items will be visible in the Issue as well. 8.4.4 Linking to files Linking to specific files or versions of files is good practice when you are discussing it in an Issue: reduce the work for the person reading the Issue (which might be Future You!). You can link to the file by opening it in the browser and copying its URL and placing it in Markdown formatting for hyperlinks: [text to hyperlink](URL). You can also navigate to a specific version of that file, or a specific commit message, if you want to capture that file at a specific point in time. You can also anchor to specific lines within a file, which is useful if you are requesting feedback on a specific part of an analysis or asking for help troubleshooting. I can send someone to a specific place within a file with the appropriate lines highlighted. For example [important code](https://github.com/Openscapes/issues-demo/blob/master/code-example.R#L12-L13) will render as important code. 8.4.5 Assigning, Labels On the right side of the Issue thread, there is the “metadata” for the Issue. You can assign the Issue to a specific user, or label it with a suite of labels that you can customize (when you click on labels, see all the way at the bottom the option to edit labels. And there are other ways to navigate there as well). If you navigate back to the full list of Issue topics (which will have the URL github.com/username-or-organization/repo-name/issues), you’ll see these metadata categories listed at the top as well, which lets you filter or view based on these categories. 8.4.6 Projects, Milestones Projects and Milestones are further ways to organize and track progress with your Issues. Projects are a way to organize and prioritize your issues. It uses the idea of a Kanban board, which Wikipedia says “visually depict work at various stages of a process using cards to represent work items and columns to represent each stage of the process. Cards are moved from left to right to show progress and to help coordinate teams performing the work.” The simplest have 3 columns labeled “to do”, “doing” and “done”. You can use Projects for both Organization or personal projects. In fact, you can have multiple projects within the same repository, so different people can have different Projects organized within their shared repository, for example. You have a lot of control over how you will manage your Projects; at this point I do not use all the features but have been playing around with using them for Openscapes planning: Milestones are a way to attach deadlines to your Project (although you do not need to identify a date if you don’t want to). Once you create a Milestone, you can add Issues to that Milestone to help track progress. For example, maybe you have a presentation coming up and there are several Issues that need to be addressed before then. 8.5 Strategies for Issues Every repo has Issues, but do you want to use Issues in every repo? It helps to consider the purpose for the Issues. Using Issues for “traditional” bug/features for code, it makes sense to keep the repository public and have all Issues pertaining to that repo there within that repo. If you’re using Issues for “non-traditional” laboratory research group and science conversations, there are other considerations. Maybe you do want a private repository, but even so you’ll want to think ahead. Will you eventually make that repo public when you publish your study? Changing a repo from private to public (or vice versa, both are possible in the repository’s Settings) will make not only the code and files of that repo public, but also all the Issues. Which is fine, but it might add considerations in terms of what is discussed in those Issues. 8.5.1 OHI example Here is an example of the Ocean Health Index team’s thought process &amp; strategy. Our team works within a GitHub Organization called “OHI-Science”. Within that Organization, we work in many repositories, with different combinations of people working primarily within different repositories. Sanity-wise, we didn’t want to have conversations in Issues within each of those repositories because it would make finding those conversations more difficult (although now GitHub can search all Issues/code across an Organization!). We also wanted our repos to be public, but to have private conversations using the Issues feature. These two needs led us to create a single private repository named “issues”, and we only use it for Issues. This works really well for us, especially since our team lead can engage in these discussions by receiving emails about the Issues in his inbox, and can respond without having to go to GitHub.com. 8.6 Your Turn: Create &amp; comment on issues We will break into groups and you can explore some of these features in Issues. Here is what to do: Go to github.com/openscapes/demo/issues Create an issue, tag people in your breakout group (ask for their username) Browse issues, comment in other issues Try: Linking to the .md document you created in the previous chapter Creating a label and applying it, assigning people Adding Issues to a Project (create one if need be) Closing an Issue Have fun! And throughout the process, talk to your breakout group, and share what you learn. Here’s what your inbox will look like afterwards: This is pretty rare to receive so many emails all at once. But you can always switch your setting to “Not Watch” this repository so that you only receive emails about Issues that you are tagged in. "],
["streamlined-code.html", "Chapter 9 Streamlined workflows with code 9.1 Source files 9.2 Filepaths 9.3 Project oriented workflows", " Chapter 9 Streamlined workflows with code Alternative title: “coding for not just you in this moment” We will discuss good coding practices for beginning and seasoned coders alike that make it easier to work with other people, times, and computers. Most of this comes directly from Jenny Bryan &amp; Jim Hester’s awesome course What they Forgot to Teach You About R. I highly recommend reading Chapters 1-4 that go into much better detail than the notes here. Note: these are all general coding practices, not R-specific 9.1 Source files What are they and why? Code that creates objects is “source code”. Source code is essentially text files you edit in a text editor that is then executed in the console. Examples: .R, .Rmd .py .m 9.1.1 Save the source, not the workspace Save the source code; do not save the R object itself. Save your commands as a .R or .py (“script”), or .Rmd or .ipynb (“R Markdown” or “notebook”) file. It doesn’t have to be polished. Just save it! Everything that really matters should be achieved through code that you save – including objects and figures The contrast is storing them implicitly or explicitly, as part of an entire workspace, or clicking via the mouse. 9.1.2 Always start R with a blank slate Saving code is an absolute requirement for reproducibility. When you quit, do not save the workspace to an .Rdata file. When you launch, do not reload the workspace from an .Rdata file. In RStudio, set this via Tools &gt; Global Options. 9.1.3 Restart R often during development “Have you tried turning it off and then on again?” – timeless troubleshooting wisdom, applies to everything If you use RStudio, use the menu item Session &gt; Restart R Additional ways to restart development where you left off, i.e. “re-run all the code up to HERE” 9.1.4 Avoid rm(list = ls()) It’s common to see scripts begin with this object-nuking command: rm(list = ls()) This is highly suggestive of a non-reproducible workflow. The problem with rm(list = ls()) is that, given the intent, it does not go far enough. It only deletes user-created objects from the global workspace. Instead, Restart R!! 9.2 Filepaths Every saved thing gets a unique path. Your code needs to run from somewhere specific. And when it interacts with other things (data or other code), you need to tell your code where things are. The more deliberate you are about where things live, The easier it will be for you and future you The easier it will be for other people The easier it will be on another computer 9.2.1 setwd(“path/that/only/works/on/my/machine”) The chance of setwd() having the desired effect – making the file paths work – for anyone besides its author is 0%. It’s also unlikely to work for the author one or two years or computers from now. Hard-wired, absolute paths, especially when sprinkled throughout the code, make a project brittle. Such code does not travel well across time or space. 9.2.2 setwd() BUT, if you still decide to use setwd() in your scripts, you should at least be very disciplined about it: Only use setwd() at the very start of a file, i.e. in an obvious and predictable place. Always set working directory to the same thing, namely to the top-level of the project. Always build subsequent paths relative to that. 9.2.3 R users: use the here package here() identifies your project’s files, based on the current working directory at the time when the package is loaded. library(here) here() 9.3 Project oriented workflows 9.3.1 Dilemma and Solution Problem statement: We want to work on project A with the working directory set to path/to/projectA (my data analysis) and on project B with the working directory set to path/to/projectB (my teaching material). But we also want to keep code like setwd(“path/to/projectA”) out of our scripts. Solution: Solution: use an IDE that supports a project-based workflow. An integrated development environment (IDE) offers: a powerful, R-aware code editor many ways to send your code to a running R process other modern conveniences And it eliminates: temptation to develop code directly in the Console. (instead:.R!) tension between development convenience and portability of the code. 9.3.2 Organize your work into projects Here’s what I mean by “work in a project”: File system discipline: put all files related to a project in a designated folder. This applies to data, code, figures, notes, etc. Depending on project complexity, you might enforce further organization into subfolders. Working directory intentionality: when working on project A, make sure working directory is set to project A’s folder. Ideally, this is achieved via the development workflow and tooling, not by baking absolute paths into the code. File path discipline: all paths are relative — relative to the project’s folder. Synergistic habits: you’ll get the biggest payoff if you practice all of them together. Portability: the project can be moved around on your computer or onto other computers and will still “just work”. is the only practical convention that creates reliable, polite behavior across different computers/users/time. This convention is neither new, nor unique to R. It’s like agreeing that we will all drive on the left or the right. A hallmark of civilization is following conventions that constrain your behavior a little, in the name of public safety. 9.3.3 RStudio Projects The RStudio IDE has a notion of a (capital “P”) Project, which is a very effective implementation of (small “p”) projects. Project have an.Rproj file in the folder, which is used to store settings specific to that project. Use File &gt; New Project … to get started. Allows for multiple projects no danger of crosstalk: each has own R process, global workspace &amp; working directory Same “unit” as a GitHub repo! 9.3.4 Tips for RStudio Projects One suggestion for organizing: Have a dedicated folder for your Projects. - If you have One Main Place for Projects, then go there in Finder/File Explorer to launch any specific project with .Rproj. - Mine is called “~/github/”. Switching Projects: RStudio knows about recent Projects. 9.3.5 Name files deliberately Jenny Bryan’s 3 rules for Naming Things: machine readable human readable plays well with default ordering Available from Speakerdeck or download pdf "],
["communities.html", "Chapter 10 Coding with communities", " Chapter 10 Coding with communities Coming soon. Slides are best until then. "],
["r-scicomm.html", "Chapter 11 R for science communication 11.1 books with bookdown 11.2 websites with RMarkdown 11.3 websites with Blogdown", " Chapter 11 R for science communication So much potential for public communication, lab protocols and documents, etc. with R. All based on RMarkdown. 11.1 books with bookdown Commit the generated docs/ directory! Then, change the setting in your repo on github.com so that github knows where your book is located so it can publish it. Here’s what to do: go to https://github.com/haudarren/ai_handbook click on settings at the top bar (at the opposite end from code, issues, pull requests) scroll down to the GitHub pages section. Click on Source and change it so it reads master branch /docs folder like below. You should get a green band like below that says “your site is published to username.github.io/reponame” 11.2 websites with RMarkdown simple, static 11.3 websites with Blogdown fancier, dynamic "]
]
